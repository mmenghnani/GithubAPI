{"ast":null,"code":"import { FETCH_POSTS, NEW_REPO, LIST_REPOS } from './types';\nvar bearer = 'Bearer 99968b720ada390d18c37faf81997a2b4d86aff4';\nexport var fetchPosts = function fetchPosts() {\n  return function (dispatch) {\n    fetch('https://api.github.com/users/mmenghnani/starred', {\n      headers: {\n        'Authorization': bearer\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (posts) {\n      return dispatch({\n        type: FETCH_POSTS,\n        payload: posts\n      });\n    });\n  };\n};\nexport var createNewRepo = function createNewRepo(postData) {\n  return function (dispatch) {\n    fetch('https://api.github.com/user/repos', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(postData)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (postData) {\n      return dispatch({\n        type: NEW_POST,\n        payload: postData\n      });\n    });\n  };\n};\nexport var fetchUserRepos = function fetchUserRepos(userName) {\n  return function (dispatch) {\n    fetch(\"https://api.github.com/users/\".concat(userName, \"/repos?page=1&per_page=100\"), {\n      headers: {\n        'Authorization': bearer\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (repos) {\n      return dispatch({\n        type: LIST_REPOS,\n        payload: repos\n      });\n    });\n  };\n};\nexport var fetchUserFollowing = function fetchUserFollowing(userName) {\n  return function (dispatch) {\n    fetch(\"https://api.github.com/users/\".concat(userName, \"/repos?page=1&per_page=100\"), {\n      headers: {\n        'Authorization': bearer\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (repos) {\n      return dispatch({\n        type: LIST_REPOS,\n        payload: repos\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/mohit.menghnani/Desktop/GithubAPI/src/actions/postActions.js"],"names":["FETCH_POSTS","NEW_REPO","LIST_REPOS","bearer","fetchPosts","dispatch","fetch","headers","then","res","json","posts","type","payload","createNewRepo","postData","method","body","JSON","stringify","NEW_POST","fetchUserRepos","userName","repos","fetchUserFollowing"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAA+BC,UAA/B,QAAiD,SAAjD;AAEA,IAAMC,MAAM,GAAG,iDAAf;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAC,QAAQ,EAAI;AACpCC,IAAAA,KAAK,CAAC,iDAAD,EAAoD;AACrDC,MAAAA,OAAO,EAAG;AACN,yBAAiBJ;AADX;AAD2C,KAApD,CAAL,CAKCK,IALD,CAKM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KALT,EAMCF,IAND,CAMM,UAAAG,KAAK;AAAA,aAAIN,QAAQ,CAAC;AACpBO,QAAAA,IAAI,EAAGZ,WADa;AAEpBa,QAAAA,OAAO,EAAGF;AAFU,OAAD,CAAZ;AAAA,KANX;AAUH,GAXqB;AAAA,CAAnB;AAaP,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,QAAQ;AAAA,SAAI,UAAAV,QAAQ,EAAI;AACjDC,IAAAA,KAAK,CAAC,mCAAD,EAAsC;AACzCU,MAAAA,MAAM,EAAE,MADiC;AAEzCT,MAAAA,OAAO,EAAG;AACR,wBAAiB;AADT,OAF+B;AAKzCU,MAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeJ,QAAf;AALkC,KAAtC,CAAL,CAOGP,IAPH,CAOQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KAPX,EAQGF,IARH,CAQQ,UAAAO,QAAQ;AAAA,aAAIV,QAAQ,CAAC;AACvBO,QAAAA,IAAI,EAAGQ,QADgB;AAEvBP,QAAAA,OAAO,EAAGE;AAFa,OAAD,CAAZ;AAAA,KARhB;AAYH,GAboC;AAAA,CAA9B;AAeP,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD;AAAA,SAAc,UAAAjB,QAAQ,EAAI;AACpDC,IAAAA,KAAK,wCAAiCgB,QAAjC,iCAAuE;AACpEf,MAAAA,OAAO,EAAG;AACN,yBAAiBJ;AADX;AAD0D,KAAvE,CAAL,CAKKK,IALL,CAKU,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KALb,EAMKF,IANL,CAMU,UAAAe,KAAK;AAAA,aAAIlB,QAAQ,CAAC;AACpBO,QAAAA,IAAI,EAAGV,UADa;AAEpBW,QAAAA,OAAO,EAAGU;AAFU,OAAD,CAAZ;AAAA,KANf;AAUH,GAX6B;AAAA,CAAvB;AAaP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACF,QAAD;AAAA,SAAc,UAAAjB,QAAQ,EAAI;AACxDC,IAAAA,KAAK,wCAAiCgB,QAAjC,iCAAuE;AACpEf,MAAAA,OAAO,EAAG;AACN,yBAAiBJ;AADX;AAD0D,KAAvE,CAAL,CAKKK,IALL,CAKU,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KALb,EAMKF,IANL,CAMU,UAAAe,KAAK;AAAA,aAAIlB,QAAQ,CAAC;AACpBO,QAAAA,IAAI,EAAGV,UADa;AAEpBW,QAAAA,OAAO,EAAGU;AAFU,OAAD,CAAZ;AAAA,KANf;AAUH,GAXiC;AAAA,CAA3B","sourcesContent":["import { FETCH_POSTS, NEW_REPO,LIST_REPOS } from './types';\n\nconst bearer = 'Bearer 99968b720ada390d18c37faf81997a2b4d86aff4';\n\nexport const fetchPosts = () => dispatch => {\n        fetch('https://api.github.com/users/mmenghnani/starred', {\n            headers : {\n                'Authorization': bearer,\n            }\n        })\n        .then(res => res.json())\n        .then(posts => dispatch({\n            type : FETCH_POSTS,\n            payload : posts\n        }))\n    }\n\nexport const createNewRepo = postData => dispatch => {\n    fetch('https://api.github.com/user/repos', {\n      method: 'POST',\n      headers : {\n        'content-type' : 'application/json'\n      },\n      body : JSON.stringify(postData)\n    })\n      .then(res => res.json())\n      .then(postData => dispatch({\n          type : NEW_POST,\n          payload : postData\n      }))\n}    \n\nexport const fetchUserRepos = (userName) => dispatch => {\n    fetch(`https://api.github.com/users/${userName}/repos?page=1&per_page=100`, {\n            headers : {\n                'Authorization': bearer,\n            }\n        })\n        .then(res => res.json())\n        .then(repos => dispatch({\n            type : LIST_REPOS,\n            payload : repos\n        }));\n}\n\nexport const fetchUserFollowing = (userName) => dispatch => {\n    fetch(`https://api.github.com/users/${userName}/repos?page=1&per_page=100`, {\n            headers : {\n                'Authorization': bearer,\n            }\n        })\n        .then(res => res.json())\n        .then(repos => dispatch({\n            type : LIST_REPOS,\n            payload : repos\n        }));\n}\n"]},"metadata":{},"sourceType":"module"}