{"ast":null,"code":"import _classCallCheck from \"/Users/mohit.menghnani/Desktop/React-Redux/github-api/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mohit.menghnani/Desktop/React-Redux/github-api/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mohit.menghnani/Desktop/React-Redux/github-api/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mohit.menghnani/Desktop/React-Redux/github-api/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mohit.menghnani/Desktop/React-Redux/github-api/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/mohit.menghnani/Desktop/React-Redux/github-api/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/mohit.menghnani/Desktop/React-Redux/github-api/src/components/SearchRepos.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchUserRepos } from \"../actions/postActions\";\nimport { Button, Input } from \"../styles\";\nimport Table from 'react-bootstrap/Table';\n\nvar SearchRepos =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchRepos, _Component);\n\n  function SearchRepos(props) {\n    var _this;\n\n    _classCallCheck(this, SearchRepos);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchRepos).call(this, props));\n    _this.state = {\n      username: \"\"\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.truncate = _this.truncate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SearchRepos, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount(username) {//   const val = 'priyanka-joshi'\n      //   this.props.fetchUserRepos(val);\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      this.setState({\n        username: e.target.value\n      });\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      e.preventDefault();\n      this.props.fetchUserRepos(this.state.username);\n    }\n  }, {\n    key: \"truncate\",\n    value: function truncate(string) {\n      if (string.length > 50) return string.substring(0, 100) + \"...\";else return string;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var repoItems = this.props.repos ? this.props.repos.map(function (repo) {\n        return React.createElement(\"div\", {\n          key: repo.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, repo.name)), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, repo.description ? _this2.truncate(repo.description) : \"Repository description does not exist\"));\n      }) : \"Username does not exist\";\n      console.log(this.props.repos);\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Get Github Repositories\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \" Enter the github username \"), React.createElement(Input, {\n        type: \"text\",\n        name: \"username\",\n        value: this.state.username,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Submit\")))), repoItems.length ? \"We found the following \".concat(repoItems.length, \" repositories for this user\") : \"\", repoItems);\n    }\n  }]);\n\n  return SearchRepos;\n}(Component);\n\nSearchRepos.prototypes = {\n  fetchUserRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    repos: state.posts.repos\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchUserRepos: fetchUserRepos\n})(SearchRepos);","map":{"version":3,"sources":["/Users/mohit.menghnani/Desktop/React-Redux/github-api/src/components/SearchRepos.js"],"names":["React","Component","PropTypes","connect","fetchUserRepos","Button","Input","Table","SearchRepos","props","state","username","onChange","bind","onSubmit","truncate","e","setState","target","value","preventDefault","string","length","substring","repoItems","repos","map","repo","id","name","description","console","log","prototypes","func","isRequired","array","mapStateToProps","posts"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchUserRepos } from \"../actions/postActions\";\nimport { Button, Input } from \"../styles\";\nimport Table from 'react-bootstrap/Table'\n\n\nclass SearchRepos extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\"\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.truncate = this.truncate.bind(this);\n  }\n\n  componentWillMount(username) {\n    //   const val = 'priyanka-joshi'\n    //   this.props.fetchUserRepos(val);\n  }\n\n  onChange(e) {\n    this.setState({ username: e.target.value });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.props.fetchUserRepos(this.state.username);\n  }\n\n  truncate(string) {\n    if (string.length > 50) return string.substring(0, 100) + \"...\";\n    else return string;\n  }\n\n  render() {\n    const repoItems = this.props.repos\n      ? this.props.repos.map(repo => (\n          <div key={repo.id}>\n            <div><h3>{repo.name}</h3></div>\n            <div>\n              {repo.description\n                ? this.truncate(repo.description)\n                : \"Repository description does not exist\"}\n            </div>\n          </div>\n        ))\n      : \"Username does not exist\";\n    console.log(this.props.repos);\n    return (\n      <React.Fragment>\n        <div>\n          <h1>Get Github Repositories</h1>\n          <form onSubmit={this.onSubmit}>\n            <div>\n              <label> Enter the github username </label>\n              <Input\n                type=\"text\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={this.onChange}\n              />\n              <Button type=\"submit\">Submit</Button>\n            </div>\n          </form>\n        </div>\n          {repoItems.length\n            ? `We found the following ${\n                repoItems.length\n              } repositories for this user`\n            : \"\"}\n          {repoItems}\n      </React.Fragment>\n    );\n  }\n}\n\nSearchRepos.prototypes = {\n  fetchUserRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.posts.repos\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchUserRepos }\n)(SearchRepos);\n"]},"metadata":{},"sourceType":"module"}