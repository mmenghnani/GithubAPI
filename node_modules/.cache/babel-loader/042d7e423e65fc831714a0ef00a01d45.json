{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.translate3d = exports.textAlign = exports.borderRadius = exports.right = exports.left = exports.rtlSpacing = void 0;\n\nvar leftToRight = function leftToRight(left, right) {\n  return function (_ref) {\n    var theme = _ref.theme;\n    return theme.rtl ? right : left;\n  };\n};\n\nvar rtlSpacing = function rtlSpacing(value) {\n  return function (_ref2) {\n    var theme = _ref2.theme;\n\n    if (!theme.rtl) {\n      return value;\n    }\n\n    var parts = value.split(\" \").filter(function (part) {\n      return !Number.isNaN(parseFloat(part)) && part;\n    });\n    return parts.length === 4 ? [parts[0], parts[3], parts[2], parts[1]].join(\" \") : value;\n  };\n};\n\nexports.rtlSpacing = rtlSpacing;\nvar left = leftToRight(\"left\", \"right\");\nexports.left = left;\nvar right = leftToRight(\"right\", \"left\");\nexports.right = right;\n\nvar borderRadius = function borderRadius(value) {\n  return function (_ref3) {\n    var theme = _ref3.theme;\n\n    if (!theme.rtl) {\n      return value;\n    }\n\n    var parts = value.split(\" \").filter(function (part) {\n      return !Number.isNaN(parseFloat(part)) && part;\n    });\n    return parts.length === 4 ? [parts[1], parts[0], parts[3], parts[2]].join(\" \") : value;\n  };\n};\n\nexports.borderRadius = borderRadius;\n\nvar textAlign = function textAlign(value) {\n  return function (_ref4) {\n    var theme = _ref4.theme;\n\n    if (theme.rtl) {\n      if (value === \"left\") {\n        return leftToRight(\"left\", \"right\")({\n          theme: theme\n        });\n      }\n\n      if (value === \"right\") {\n        return leftToRight(\"right\", \"left\")({\n          theme: theme\n        });\n      }\n    }\n\n    return value;\n  };\n};\n\nexports.textAlign = textAlign;\n\nvar translate3d = function translate3d(value) {\n  return function (_ref5) {\n    var theme = _ref5.theme;\n\n    if (!theme.rtl) {\n      return \"translate3d(\".concat(value, \")\");\n    }\n\n    var parts = value.split(\",\").filter(function (part) {\n      return !Number.isNaN(parseFloat(part)) && part;\n    });\n    var x = parts[0];\n    var newX = x[0] === \"-\" ? x.slice(1) : \"-\".concat(x);\n    return \"translate3d(\".concat(newX, \",\").concat(parts[1], \",\").concat(parts[2], \")\");\n  };\n};\n\nexports.translate3d = translate3d;","map":null,"metadata":{},"sourceType":"script"}