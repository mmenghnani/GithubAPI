import * as React from "react";
import styled from "styled-components";
import defaultTheme from "../defaultTheme";
import { TYPE_OPTIONS, TOKENS } from "./consts";
import { rtlSpacing } from "../utils/rtl";

const getTypeToken = name => ({
  theme,
  type
}) => {
  const tokens = {
    [TOKENS.background]: {
      [TYPE_OPTIONS.NEUTRAL]: theme.orbit.backgroundBadgeNeutral,
      [TYPE_OPTIONS.INFO]: theme.orbit.backgroundBadgeInfo,
      [TYPE_OPTIONS.SUCCESS]: theme.orbit.backgroundBadgeSuccess,
      [TYPE_OPTIONS.WARNING]: theme.orbit.backgroundBadgeWarning,
      [TYPE_OPTIONS.CRITICAL]: theme.orbit.backgroundBadgeCritical,
      [TYPE_OPTIONS.DARK]: theme.orbit.backgroundBadgeDark,
      [TYPE_OPTIONS.WHITE]: theme.orbit.backgroundBadgeWhite
    },
    [TOKENS.color]: {
      [TYPE_OPTIONS.NEUTRAL]: theme.orbit.colorTextBadgeNeutral,
      [TYPE_OPTIONS.INFO]: theme.orbit.colorTextBadgeInfo,
      [TYPE_OPTIONS.SUCCESS]: theme.orbit.colorTextBadgeSuccess,
      [TYPE_OPTIONS.WARNING]: theme.orbit.colorTextBadgeWarning,
      [TYPE_OPTIONS.CRITICAL]: theme.orbit.colorTextBadgeCritical,
      [TYPE_OPTIONS.DARK]: theme.orbit.colorTextBadgeDark,
      [TYPE_OPTIONS.WHITE]: theme.orbit.colorTextBadgeWhite
    }
  };
  return tokens[name][type];
};

const StyledBadge = styled(({
  className,
  children,
  dataTest
}) => React.createElement("div", {
  className: className,
  "data-test": dataTest
}, children)).withConfig({
  displayName: "Badge__StyledBadge",
  componentId: "sc-1y6i8f0-0"
})(["font-family:", ";display:inline-flex;flex:0 0 auto;box-sizing:border-box;justify-content:center;align-items:center;height:", ";line-height:", ";width:", ";font-size:", ";font-weight:", ";background-color:", ";color:", ";border-radius:", ";padding:", ";"], ({
  theme
}) => theme.orbit.fontFamily, ({
  theme
}) => theme.orbit.heightBadge, ({
  theme
}) => theme.orbit.heightBadge, ({
  circled,
  theme
}) => circled && theme.orbit.widthBadgeCircled, ({
  theme
}) => theme.orbit.fontSizeTextSmall, ({
  theme
}) => theme.orbit.fontWeightMedium, getTypeToken(TOKENS.background), getTypeToken(TOKENS.color), ({
  theme
}) => theme.orbit.borderRadiusBadge, ({
  theme,
  circled
}) => !circled && theme.orbit.paddingBadge);
StyledBadge.defaultProps = {
  theme: defaultTheme
};
const IconContainer = styled(({
  className,
  children
}) => React.createElement("div", {
  className: className
}, children)).withConfig({
  displayName: "Badge__IconContainer",
  componentId: "sc-1y6i8f0-1"
})(["display:flex;flex-shrink:0;margin:", ";svg{height:", ";width:", ";}"], ({
  theme,
  hasContent
}) => hasContent && rtlSpacing(theme.orbit.marginBadgeIcon), ({
  theme
}) => theme.orbit.widthIconSmall, ({
  theme
}) => theme.orbit.heightIconSmall);
IconContainer.defaultProps = {
  theme: defaultTheme
};
const StyledBadgeContent = styled.div.withConfig({
  displayName: "Badge__StyledBadgeContent",
  componentId: "sc-1y6i8f0-2"
})([""]);

const Badge = props => {
  const {
    type = TYPE_OPTIONS.NEUTRAL,
    icon,
    children,
    circled,
    dataTest
  } = props;
  return React.createElement(StyledBadge, {
    type: type,
    circled: circled,
    dataTest: dataTest
  }, icon && React.createElement(IconContainer, {
    type: type,
    hasContent: !!children
  }, icon), React.createElement(StyledBadgeContent, null, children));
};

export default Badge;